name: '🏷️'

on:
  pull_request:
    branches: [master]

jobs:
  master-version:
    runs-on: ubuntu-latest
    outputs:
      version: ${{ env.BASE_VERSION }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: master
      - name: base version
        run: echo "BASE_VERSION=$(jq -r '.version' package.json)" >> $GITHUB_ENV
  increment-version:
    runs-on: ubuntu-latest
    needs: master-version
    env:
      GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
    steps:
      - uses: actions/checkout@v3
        with:
          ref: ${{ github.head_ref }}
      - uses: actions/setup-node@v3
        with:
          node-version: 16.x
          cache: npm
      - run: npm ci
      - name: Increment Version
        id: inc-version
        uses: actions/github-script@v6
        env:
          NO_RELEASE_TAGS: |
            norelease
            CI/CD
            docs
          BASE_VERSION: ${{ needs.master-version.outputs.version }}
        with:
          result-encoding: string
          script: |
            const { execSync } = require('child_process');
            const fs = require('fs');
            const semver = require('semver');
            console.log(context.payload.sender.type);
            const version = process.env.BASE_VERSION;
            const { version: headVersion } = JSON.parse(fs.readFileSync('./package.json'));
            const blockingTags = process.env.NO_RELEASE_TAGS.split('\n');
            const shouldInc = !context.payload.pull_request.labels
              .some((label) => blockingTags.includes(label.name));

            // get version level from PR label
            const LABEL_PREFIX = 'release:';
            const releaseLabels = context.payload.pull_request.labels
              .map((label) => label.name)
              .filter((label) => label.startsWith(LABEL_PREFIX));
            if (releaseLabels.length > 1) {
              throw new Error(`Found more than one release label: ${releaseLabels.join(', ')}`);
            }
            // increment version
            const nextVersion = shouldInc ?
              semver.inc(version, releaseLabels[0]?.replace(LABEL_PREFIX, '') || 'prerelease', 'rc') :
              version;

            // write file
            fs.writeFileSync('./package.json', JSON.stringify({ 
              ...JSON.parse(fs.readFileSync('./package.json')), 
              version: nextVersion
            }, null, 2));
            execSync('npx prettier --write package.json');

            return nextVersion !== headVersion ? nextVersion : '';
      - name: Commit & Push
        if: steps.inc-version.outputs.result
        run: |
          git config user.name github-actions[bot]
          git config user.email github-actions[bot]@users.noreply.github.com
          git add package.json
          git commit -m "v${{ steps.inc-version.outputs.result }}"
          git push
